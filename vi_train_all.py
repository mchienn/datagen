import json
from pathlib import Path
import re
import pandas as pd
import requests
from key import KEY_LIST
import random

MODEL = "models/gemini-2.5-flash"
HEADERS = {"Content-Type": "application/json"}

current_key_index = random.randint(0, len(KEY_LIST) - 1)
used_keys = set()

def rotate_api_key():
    global current_key_index
    used_keys.add(current_key_index)
    print(f"üîÅ Gemini key index {current_key_index} failed. Switching...")
    if len(used_keys) == len(KEY_LIST):
        print("‚ùå All Gemini API keys exhausted. Exiting.")
        exit(1)
    current_key_index = (current_key_index + 1) % len(KEY_LIST)

def get_url():
    return f"https://generativelanguage.googleapis.com/v1beta/{MODEL}:generateContent?key={KEY_LIST[current_key_index]}"

def call_gemini(prompt: str):
    while True:
        body = {"contents": [{"parts": [{"text": prompt}]}]}
        response = requests.post(get_url(), headers=HEADERS, json=body)

        try:
            content = response.json()
            print(content['usageMetadata'])
            if 'candidates' in content:
                # Reset used_keys on success
                used_keys.clear()
                raw_text = content["candidates"][0]["content"]["parts"][0]["text"]
                if raw_text.strip().startswith("```json"):
                    raw_text = raw_text.strip().removeprefix("```json").removesuffix("```").strip()
                print(raw_text)
                return raw_text
            elif content.get("error", {}).get("code") == 429:
                print("‚ùå Gemini error:")
                print(json.dumps(content, indent=2, ensure_ascii=False))
                rotate_api_key()
            else:
                print("‚ùå Gemini error:")
                print(json.dumps(content, indent=2, ensure_ascii=False))
                rotate_api_key()
        except Exception as e:
            print("‚ùå Unexpected error:", e)
            try:
                # N·∫øu ƒë√£ c√≥ content JSON, in ƒë·∫ßy ƒë·ªß
                print("üìÑ Full JSON content:")
                print(json.dumps(content, indent=2, ensure_ascii=False))
            except NameError:
                # N·∫øu ch∆∞a parse ƒë∆∞·ª£c content th√¨ in raw text
                print("üìÑ Raw response text:")
                print(response.text[:2000])  # Gi·ªõi h·∫°n 2000 k√Ω t·ª± tr√°nh log qu√° d√†i
            rotate_api_key()

def load_text(path):
    with open(path, encoding="utf-8") as f:
        return f.read()

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def read_json(path):
    with open(path, encoding="utf-8") as f:
        return json.load(f)

def extract_json_from_text(text: str) -> str:
    text = text.strip()
    # Remove markdown code blocks and any leading ```python or ```
    text = re.sub(r"^```(?:python)?\\n", "", text)
    text = re.sub(r"```$", "", text)
    return text.strip()

def step0_create_task(filename: str):
    # Chu·∫©n b·ªã th∆∞ m·ª•c & file ƒë√≠ch
    INPUT_DIR = Path("Input")
    INPUT_DIR.mkdir(parents=True, exist_ok=True)
    out_path = INPUT_DIR / (filename if filename.endswith(".txt") else f"{filename}.txt")
    prompt = """
You are a professional UI test designer.
Generate exactly 20 Vietnamese UI test description strings.

Output format (must be followed exactly):
- Return ONLY a valid JSON array of exactly 20 strings (Inside each string you may include 10‚Äì15 action UI checks like the example below).
- Use JSON double quotes for the array items (JSON requirement).
- Inside each string, do not include any double quotes; use only single quotes for quoted labels or literals.
- Do not include numbering, markdown, code fences, or any extra text outside the JSON array.

Strict constraints (must satisfy all):
- Output is a single JSON array, e.g., ["sentence 1", "sentence 2", ...]. Inside each string you may include 10‚Äì15 UI checks like the example below.
- Absolutely forbid vague words (e.g., ph√π h·ª£p, nhanh, m∆∞·ª£t m√†, ƒë·ªß,...). Always provide measurable values.
- Steps must be ordered and complete.
- Each sentence should describe many attributes of the same element (e.g., font size, color, border, ...).
- Each action should specify multiple attributes at once (style, layout, state, ...).
- Always provide concrete, measurable expected values with units or counts where applicable: exact pixels (e.g., 16px), RGB/HEX colors (e.g., rgb(34,139,34) or #228B22 or xanh l√° c√¢y), time (e.g., 800ms, 2s), percentage (e.g., 75%), URL (full), viewport width (e.g., 360px), coordinates (x,y).
- Do not combine two unrelated actions in one sentence. If the same action applies to unrelated elements, split them into separate sentences.
- Inside each string, use only single quotes (') when quoting text/labels/links; do not use any double quotes (") inside the content.
- Quote usage policy:
   - Use single quotes ONLY when quoting human-readable text or identifiers such as: visible UI text content, link URLs, file names (e.g., 'Submit', 'https://...', 'Roboto', 'hero_image.jpg').
   - Do NOT wrap numeric values, units, color codes, or CSS function values in single quotes. Disallowed forms include: '16px', '2s', '800ms', '75%', '#ff0000', 'rgb(34,139,34)', 'rgba(0,0,0,0.5)', 'hsl(0, 0%, 100%)', '400x300px'. These must appear without the extra single quotes.
   - Do not single-quote boolean-like words or states (visible/hidden, enabled/disabled, active/selected, true/false).

Coverage (ensure diversity across the 20 items):
- You are allowed to use the attributes CSS extract from web (window.getComputedStyle) like:
 - D·ªØ li·ªáu hi·ªÉn th·ªã: th·ªùi gian (timestamp
 - Ki·ªÉu hi·ªÉn th·ªã tr·ª±c quan: ƒë·ªï b√≥ng, ki·ªÉu t√≠nh k√≠ch th∆∞·ªõc h·ªôp, m√†u t√¥, ƒë·ªô m·ªù m√†u t√¥, n√©t v·∫Ω, ƒë·ªô m·ªù n√©t v·∫Ω, kho·∫£ng c√°ch d√≤ng, kho·∫£ng c√°ch gi·ªØa c√°c t·ª´, kho·∫£ng c√°ch gi·ªØa c√°c k√Ω t·ª±, kho·∫£ng c√°ch h√†ng, kho·∫£ng c√°ch c·ªôt, chi·ªÅu r·ªông c·ªôt, h√¨nh n·ªÅn, k√≠ch th∆∞·ªõc n·ªÅn, v√πng hi·ªÉn th·ªã n·ªÅn, g·ªëc n·ªÅn, b·ªô l·ªçc. (T∆∞∆°ng ·ª©ng v·ªõi c√°c css: box shadow, box sizing, fill, fill-opacity, stroke, stroke-opacity, line height, word spacing, letter spacing, row gap, column gap, column width, background image, background size, background clip, background origin, filter).
 - V·ªã tr√≠ v√† b·ªë c·ª•c: hi·ªÉn th·ªã, th·ª© t·ª± ch·ªìng l·ªõp, ph·∫ßn t·ª≠ cha tham chi·∫øu, chi·ªÅu r·ªông offset, chi·ªÅu cao offset, ƒë∆∞·ªùng di chuy·ªÉn offset, v·ªã tr√≠ offset, tr√†n ngang, tr√†n d·ªçc, tr√†n kh·ªëi, tr√†n n·ªôi tuy·∫øn, chi·ªÅu r·ªông t·ªëi thi·ªÉu, chi·ªÅu cao t·ªëi thi·ªÉu, chi·ªÅu r·ªông t·ªëi ƒëa, chi·ªÅu cao t·ªëi ƒëa, xoay, co gi√£n, v√πng c·∫Øt.(T∆∞∆°ng ·ª©ng v·ªõi c√°c css: display, z index, offset parent, offset width, offset height, offset path, offset position, overflow x, overflow y, overflow block, overflow inline, min width, min height, max width, max height, rotate, scale, clip).
 - Tr·∫°ng th√°i v√† t∆∞∆°ng t√°c: c√≥ th·ªÉ nh·∫•p, con tr·ªè chu·ªôt. (clickable, cursor)
 - Ki·ªÉu d√°ng: m√†u ch·ªØ, m√†u n·ªÅn, c·ª° ch·ªØ, ph√¥ng ch·ªØ, ƒë·ªô ƒë·∫≠m ch·ªØ, vi·ªÅn, bo g√≥c, ƒë·ªô m·ªù, ph·∫ßn ƒë·ªám, l·ªÅ. (T∆∞∆°ng t·ª± css: color, background color, font size, font family, font weight, border (px), border radius, opacity, padding, margin).
 - Tr·∫°ng th√°i & T∆∞∆°ng t√°c: hi·ªÉn th·ªã / ·∫©n, ƒë∆∞·ª£c focus, ƒë∆∞·ª£c b·∫≠t / t·∫Øt, ƒëang ho·∫°t ƒë·ªông / ƒë∆∞·ª£c ch·ªçn. (visible/hidden, focused, enabled/disabled, active/selected)
 - V·ªã tr√≠ & B·ªë c·ª•c: t·ªça ƒë·ªô X, t·ªça ƒë·ªô Y, chi·ªÅu r·ªông, chi·ªÅu cao, cƒÉn ch·ªânh, tr√°i, ph·∫£i, tr√™n, d∆∞·ªõi, cƒÉn ch·ªânh n·ªôi dung, cƒÉn ch·ªânh ch√≠nh, cƒÉn ch·ªânh ph·∫ßn t·ª≠, cƒÉn ch·ªânh ri√™ng, ƒë·ªô gi√£n, ƒë·ªô co, k√≠ch th∆∞·ªõc c∆° s·ªü. (T∆∞∆°ng ·ª©ng css: x, y, width, height, alignment, left, right, top, bottom, align content, justify content, align items, align self, flex grow, flex shrink, flex basis).
 - Ph∆∞∆°ng ti·ªán: t·∫Øt ti·∫øng (muted), to√†n m√†n h√¨nh (fullscreen).
 - Chuy·ªÉn ƒë·ªông: chuy·ªÉn ti·∫øp, ho·∫°t ·∫£nh, cu·ªôn d·ªçc/ngang. (transition, animation, scroll-top/scroll-left (scroll)).
 - VƒÉn b·∫£n: n·ªôi dung vƒÉn b·∫£n, g·ª£i √Ω nh·∫≠p, vƒÉn b·∫£n thay th·∫ø, cƒÉn l·ªÅ ch·ªØ, th·ª•t ƒë·∫ßu d√≤ng. (T∆∞∆°ng ·ª©ng css: text, placeholder, alt text, text align, text indent).
 - D·ªØ li·ªáu: s·ªë l∆∞·ª£ng, gi√° tr·ªã, ng√†y th√°ng. (T∆∞∆°ng ·ª©ng css: count, value, date).
 - H√¨nh ·∫£nh: ngu·ªìn ·∫£nh, k√≠ch th∆∞·ªõc hi·ªÉn th·ªã, k√≠ch th∆∞·ªõc t·ª± nhi√™n, tr·∫°ng th√°i t·∫£i, th·ªùi gian t·∫£i, watermark, vƒÉn b·∫£n thay th·∫ø, ngu·ªìn hi·ªán t·∫°i. (T∆∞∆°ng ·ª©ng css: source, rendered dimensions, natural dimensions, is loaded, load time, watermark, alt text, current source).
 - Kh·∫£ nƒÉng truy c·∫≠p: nh√£n aria, nh√£n m√¥ t·∫£. (T∆∞∆°ng ·ª©ng css: aria-label, label).
 - Trang web: ƒë·ªãa ch·ªâ URL, t√™n mi·ªÅn, ti√™u ƒë·ªÅ trang, ƒë∆∞·ªùng d·∫´n, chi·ªÅu r·ªông khung nh√¨n, chi·ªÅu cao khung nh√¨n. (T∆∞∆°ng ·ª©ng css: url, domain, title, path, viewport width, viewport height).
Each description MUST include one or more attributes from the list above. Do not introduce any attributes that do not exist in web CSS.

Output formatting (must follow exactly):
- Return ONLY a valid JSON array of exactly 20 strings.
- Use JSON double quotes for items.
- Inside each string, **do not** include any double quotes; use only single quotes for quoted labels/literals.
- Do not include numbering, markdown, code fences, or any other text outside the JSON array.
 - Enforce the quote usage policy above. Examples:
   - Allowed: font size 16px, color #ff0000, background rgb(34,139,34), timeout 800ms.
   - Disallowed (single-quoted values): '16px', '#ff0000', 'rgb(34,139,34)', '800ms'.

Synonym usage requirements (for linguistic diversity while preserving semantics):
- Do NOT change the original meaning of any attribute (e.g., 'm√†u n·ªÅn' vs 'm√†u n·ªÅn hi·ªÉn th·ªã', 'n·ªÅn c√≥ m√†u' must still mean the same CSS property).
- Across the 20 descriptions, alternate natural synonyms for the same attribute type to increase language variety (e.g., 'k√≠ch th∆∞·ªõc ph√¥ng ch·ªØ' / 'k√≠ch th∆∞·ªõc vƒÉn b·∫£n' / 'k√≠ch th∆∞·ªõc ki·ªÉu ch·ªØ').
- In the model's JSON output, represent values purely as text strings; no reverse mapping is required.
- The goal is to teach the model that different phrases can describe the same UI characteristic without altering the underlying attribute.

To encourage generalization, you may use natural synonyms for CSS properties while keeping the intended meaning and allowing unambiguous mapping back to the whitelist.

Example 1 string:
"M·ªü trang 'https://www.shopdemo.com/product/123'. X√°c minh r·∫±ng h√¨nh ·∫£nh s·∫£n ph·∫©m c√≥ ngu·ªìn l√† 'hero_image.jpg' v√† k√≠ch th∆∞·ªõc hi·ªÉn th·ªã l√† 400x300px. ƒê·∫£m b·∫£o r·∫±ng vƒÉn b·∫£n thay th·∫ø (alt text) c·ªßa ·∫£nh ch·ª©a c·ª•m 'Genuine Shoes'. Ki·ªÉm tra ch√≠nh x√°c c√≥ 6 h√¨nh thu nh·ªè hi·ªÉn th·ªã b√™n d∆∞·ªõi, ƒë∆∞·ª£c cƒÉn gi·ªØa, m·ªói h√¨nh r·ªông 120px v√† cao 80px. X√°c nh·∫≠n ti√™u ƒë·ªÅ ch√≠nh hi·ªÉn th·ªã ƒë√∫ng vƒÉn b·∫£n 'Product Title' v·ªõi c·ª° ch·ªØ 18px v√† m√†u #000000. X√°c minh n√∫t 'Mua ngay' hi·ªÉn th·ªã v√† khi ƒë∆∞·ª£c ch·ªçn s·∫Ω c√≥ n·ªÅn #ff0000. X√°c nh·∫≠n n√∫t c√≥ bo g√≥c 6px, th·ª±c hi·ªán thao t√°c cu·ªôn v√† ki·ªÉm tra r·∫±ng ph·∫ßn ƒë·∫ßu trang (header) v·∫´n c·ªë ƒë·ªãnh khi cu·ªôn. Ki·ªÉm tra nh√£n ng√¥n ng·ªØ c√≥ thu·ªôc t√≠nh aria-label ƒë∆∞·ª£c ƒë·∫∑t l√† English."
Return 20 strings like this inside one JSON array. Return the JSON array only.
"""

    all_sentences = []
    for _ in range(5):  # 5 batch -> ~100 c√¢u
        raw = call_gemini(prompt)
        text = extract_json_from_text(raw) if raw else ""
        sentences = []
        # 1) c·ªë parse nh∆∞ JSON array
        try:
            data = json.loads(text)
            if isinstance(data, list):
                sentences = [str(s) for s in data]
        except Exception as e:
            print(f"‚ùå Error parsing JSON: {e}")
            pass
        # 2) n·∫øu kh√¥ng ph·∫£i JSON array, t√°ch theo d√≤ng (ƒë∆°n gi·∫£n, kh√¥ng ki·ªÉm l·ªói/ch√≠nh t·∫£)
        if not sentences:
            sentences = [ln.strip().strip(",") for ln in text.splitlines() if ln.strip()]
        # Chu·∫©n ho√°: thay t·∫•t c·∫£ d·∫•u " b√™n trong c√¢u th√†nh ' ; b·ªçc to√†n b·ªô c√¢u trong d·∫•u "
        for s in sentences:
            s = s.replace('"', "'").strip()
            if not (s.startswith('"') and s.endswith('"')):
                s = f'"{s}"'
            all_sentences.append(s)

    # Ghi file: c√°c c√¢u c√°ch nhau b·ªüi d·∫•u ph·∫©y, v·∫´n gi·ªØ m·ªói c√¢u trong d·∫•u "
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(",\n".join(all_sentences))
    print(f"‚úÖ Generated {len(all_sentences)} sentences -> {out_path}")

def step1_analyze_task(input_file, batch_size=50):
    full_text = load_text(input_file)
    main_tasks = re.findall(r'"(.*?)"', full_text, re.DOTALL)
    print(len(main_tasks))
    task_list = []
    task_trace = []

    for start in range(0, len(main_tasks), batch_size):
        batch = main_tasks[start:start + batch_size]
        prompt = f"""B·∫°n l√† m·ªôt tr√¨nh t·∫°o tr∆∞·ªùng h·ª£p ki·ªÉm th·ª≠ UI chuy√™n nghi·ªáp.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn ƒë·ªïi m√¥ t·∫£ ki·ªÉm th·ª≠ ng√¥n ng·ªØ t·ª± nhi√™n sau th√†nh m·ªôt danh s√°ch c√°c h√†nh ƒë·ªông UI r√µ r√†ng, nguy√™n t·ª≠.
H√£y tu√¢n th·ªß c√°c quy t·∫Øc nghi√™m ng·∫∑t sau:
- ƒê·∫ßu ra ph·∫£i l√† m·ªôt m·∫£ng JSON c·ªßa c√°c m·∫£ng.
- Nh√≥m c√°c thu·ªôc t√≠nh li√™n quan c·ªßa c√πng m·ªôt ph·∫ßn t·ª≠ UI trong c√πng m·ªôt tr·∫°ng th√°i v√†o m·ªôt t√°c v·ª• nguy√™n t·ª≠.
  - ƒêi·ªÅu n√†y bao g·ªìm t·∫•t c·∫£ c√°c thu·ªôc t√≠nh tr·ª±c quan, b·ªë c·ª•c, ƒë·ªãnh d·∫°ng, ki·ªÉu, cƒÉn ch·ªânh v√† n·ªôi dung (v√≠ d·ª•: c·ª° ch·ªØ, m√†u s·∫Øc, n·ªÅn, b√°n k√≠nh vi·ªÅn, cƒÉn ch·ªânh).
  - Kh√¥ng t√°ch vƒÉn b·∫£n thay th·∫ø (alt text), h√¨nh m·ªù (watermark), k√≠ch th∆∞·ªõc t·ª± nhi√™n so v·ªõi k√≠ch th∆∞·ªõc k·∫øt xu·∫•t, ƒë·ªô s·∫Øc n√©t/ƒë·ªô n√©n, v.v. - n·∫øu t·∫•t c·∫£ ƒë·ªÅu ƒë·ªÅ c·∫≠p ƒë·∫øn c√πng m·ªôt h√¨nh ·∫£nh ·ªü tr·∫°ng th√°i b√¨nh th∆∞·ªùng c·ªßa n√≥.
  - Kh√¥ng t√°ch c√°c th·ª© nh∆∞ m√†u s·∫Øc, ƒë·ªãnh d·∫°ng, cƒÉn ch·ªânh, ph√¥ng ch·ªØ, l·ªÅ trong (padding), k√≠ch th∆∞·ªõc, v·ªã tr√≠, so s√°nh v·ªõi m·ªôt ph·∫ßn t·ª≠ kh√°c n·∫øu ch√∫ng thu·ªôc c√πng m·ªôt ph·∫ßn t·ª≠ trong c√πng m·ªôt ng·ªØ c·∫£nh.
  - (V√≠ d·ª•: N√∫t 'Th√™m v√†o gi·ªè h√†ng' c√≥ m√†u '#ff9900', b√°n k√≠nh vi·ªÅn '4px' v√† m√†u n·ªÅn chuy·ªÉn th√†nh '#e68a00' khi ƒë∆∞·ª£c ch·ªçn)
  - Ch·ªâ t√°ch c√°c t√°c v·ª• n·∫øu:
    - C√°c thu·ªôc t√≠nh li√™n quan ƒë·∫øn c√°c tr·∫°ng th√°i kh√°c nhau (v√≠ d·ª•: khi di chu·ªôt so v·ªõi b√¨nh th∆∞·ªùng).
    - C√°c thu·ªôc t√≠nh li√™n quan ƒë·∫øn c√°c ph·∫ßn t·ª≠ kh√°c nhau.
    - H∆∞·ªõng d·∫´n li√™n quan ƒë·∫øn m·ªôt h√†nh ƒë·ªông c·ªßa ng∆∞·ªùi d√πng theo sau l√† m·ªôt x√°c minh (v√≠ d·ª•: nh·∫•p r·ªìi ki·ªÉm tra, ƒë·ªãnh v·ªã r·ªìi ki·ªÉm tra, ƒë·ªãnh v·ªã r·ªìi g√µ), ho·∫∑c m·ªôt h√†nh ƒë·ªông c·ªßa ng∆∞·ªùi d√πng r√µ r√†ng ·ªü gi·ªØa l√† b·∫Øt bu·ªôc.
    - H∆∞·ªõng d·∫´n li√™n quan ƒë·∫øn nhi·ªÅu h√†nh ƒë·ªông (v√≠ d·ª•: "ƒê·ªãnh v·ªã tr∆∞·ªùng nh·∫≠p li·ªáu 'Email' v√† nh·∫≠p 'invalid-email'" ph·∫£i ƒë∆∞·ª£c t√°ch th√†nh 2 t√°c v·ª•: ƒê·ªãnh v·ªã tr∆∞·ªùng nh·∫≠p li·ªáu 'Email', Nh·∫≠p 'invalid-email' v√†o tr∆∞·ªùng nh·∫≠p li·ªáu 'Email').
    - H√†nh vi kh√°c nhau gi·ªØa c√°c lo·∫°i thi·∫øt b·ªã (v√≠ d·ª•: di ƒë·ªông so v·ªõi m√°y t√≠nh ƒë·ªÉ b√†n).
    - H√†nh ƒë·ªông y√™u c·∫ßu nhi·ªÅu b∆∞·ªõc ƒë·ªÉ ho√†n th√†nh (v√≠ d·ª•: ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n 'patient001' v√† m·∫≠t kh·∫©u 'Health@2023' ph·∫£i ƒë∆∞·ª£c t√°ch th√†nh 2 t√°c v·ª•: Nh·∫≠p 'patient001' v√†o tr∆∞·ªùng t√†i kho·∫£n, Nh·∫≠p 'Health@2023' v√†o tr∆∞·ªùng m·∫≠t kh·∫©u).
- M·ªói m·ª•c trong m·∫£ng l√† m·ªôt chu·ªói h√†nh ƒë·ªông ki·ªÉm th·ª≠ nguy√™n t·ª≠ duy nh·∫•t.
- Kh√¥ng t·∫°o c√°c b∆∞·ªõc kh√¥ng ƒë∆∞·ª£c m√¥ t·∫£ trong t√°c v·ª• ch√≠nh.
C√≥ th·ªÉ s·ª≠ d·ª•ng c√°c t·ª´ ƒë·ªìng nghƒ©a ƒë·ªÉ tƒÉng t√≠nh ƒëa d·∫°ng ng√¥n ng·ªØ, nh∆∞ng KH√îNG ƒë∆∞·ª£c thay ƒë·ªïi √Ω nghƒ©a ban ƒë·∫ßu c·ªßa b·∫•t k·ª≥ thu·ªôc t√≠nh n√†o.
KH√îNG bao g·ªìm gi·∫£i th√≠ch, markdown, b√¨nh lu·∫≠n ho·∫∑c b·∫•t c·ª© th·ª© g√¨ kh√°c - ch·ªâ m·∫£ng JSON.
Kh√¥ng s·ª≠ d·ª•ng b·ª´a b√£i d·∫•u ' ho·∫∑c d·∫•u ngo·∫∑c k√©p ". Ch·ªâ d√πng d·∫•u ' khi c·∫ßn tr√≠ch d·∫´n link, vƒÉn b·∫£n, text.
V√≠ d·ª•:
- Requirement:
[
"M·ªü 'https://www.netflix.com'. Nh·∫•p v√†o n√∫t 'ƒêƒÉng nh·∫≠p' n·∫±m ·ªü g√≥c tr√™n c√πng b√™n ph·∫£i (c√°ch m√©p tr√™n 50px v√† m√©p ph·∫£i 30px). Nh·∫≠p email 'testuser@example.com' v√† m·∫≠t kh·∫©u 'Test@1234'. G·ª≠i bi·ªÉu m·∫´u ƒëƒÉng nh·∫≠p. X√°c minh r·∫±ng sau khi g·ª≠i, ng∆∞·ªùi d√πng ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn 'https://www.netflix.com/browse' trong v√≤ng 3 gi√¢y v√† trang hi·ªÉn th·ªã √≠t nh·∫•t 5 h√¨nh thu nh·ªè phim ƒë∆∞·ª£c c√° nh√¢n h√≥a, v√† ƒë·∫£m b·∫£o r·∫±ng t·∫•t c·∫£ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu c√≥ ph√¥ng ch·ªØ Roboto 16px, l·ªÅ trong 12px, l·ªÅ d∆∞·ªõi 16px. N√∫t 'ƒêƒÉng nh·∫≠p' c√≥ m√†u n·ªÅn #e50914, m√†u ch·ªØ #ffffff, b√°n k√≠nh vi·ªÅn 4px, c√≥ kh·∫£ nƒÉng ph·∫£n h·ªìi tr√™n m√†n h√¨nh r·ªông 360px v√† t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ ƒë·ªÅu ƒë√°p ·ª©ng t·ª∑ l·ªá t∆∞∆°ng ph·∫£n WCAG √≠t nh·∫•t 4.5:1.",
"M·ªü 'https://www.amazon.com'. T√¨m ki·∫øm 'D√†n loa Bluetooth', x√°c minh r·∫±ng t√¨m ki·∫øm ho√†n th√†nh trong v√≤ng d∆∞·ªõi 2 gi√¢y, hi·ªÉn th·ªã √≠t nh·∫•t 10 s·∫£n ph·∫©m v·ªõi ti√™u ƒë·ªÅ ch·ª©a 'Loa Bluetooth'. X√°c nh·∫≠n m·ªói th·∫ª s·∫£n ph·∫©m c√≥ chi·ªÅu r·ªông h√¨nh ·∫£nh ch√≠nh x√°c 150px, gi√° s·∫£n ph·∫©m c√≥ c·ª° ch·ªØ 18px, v√† ƒë·∫£m b·∫£o n√∫t 'Th√™m v√†o gi·ªè h√†ng' c√≥ m√†u #ff9900, c√°c g√≥c bo tr√≤n 4px, v√† m√†u n·ªÅn khi di chu·ªôt thay ƒë·ªïi th√†nh #e68a00.",
"M·ªü 'https://shop.example.com/item/P123', x√°c minh r·∫±ng h√¨nh ·∫£nh s·∫£n ph·∫©m ch√≠nh '#main-product-image' t·∫£i th√†nh c√¥ng trong v√≤ng 800ms, c√≥ vƒÉn b·∫£n thay th·∫ø ch·ª©a 'V√≠ da Premium', kh√¥ng c√≥ h√¨nh m·ªù, k√≠ch th∆∞·ªõc t·ª± nhi√™n 1600x1200 px, hi·ªÉn th·ªã ·ªü 400x300px v·ªõi dung sai ¬±4px, ƒë·ªô s·∫Øc n√©t ‚â• 0.85, hi·ªán v·∫≠t n√©n ‚â§ 0.1, v√† ƒë·∫£m b·∫£o h√¨nh ·∫£nh ƒë∆∞·ª£c ƒë·ªãnh v·ªã ·ªü b√™n tr√°i c·ªßa kh·ªëi gi√° '.price' v·ªõi kho·∫£ng c√°ch t·ªëi thi·ªÉu 24px (¬±2px)."
]
- Response:
[
  [
"M·ªü 'https://www.netflix.com'",
"ƒê·ªãnh v·ªã n√∫t 'ƒêƒÉng nh·∫≠p' ·ªü g√≥c tr√™n c√πng b√™n ph·∫£i (c√°ch m√©p tr√™n 50px v√† m√©p ph·∫£i 30px)",
"Nh·∫•p v√†o n√∫t 'ƒêƒÉng nh·∫≠p'",
"Nh·∫≠p 'testuser@example.com' v√†o tr∆∞·ªùng nh·∫≠p email",
"ƒêi·ªÅn 'Test@1234' v√†o tr∆∞·ªùng nh·∫≠p m·∫≠t kh·∫©u",
"G·ª≠i bi·ªÉu m·∫´u ƒëƒÉng nh·∫≠p",
"X√°c minh r·∫±ng sau khi g·ª≠i, ng∆∞·ªùi d√πng ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn 'https://www.netflix.com/browse' trong v√≤ng 3 gi√¢y",
"Ki·ªÉm tra trang hi·ªÉn th·ªã √≠t nh·∫•t 5 h√¨nh thu nh·ªè phim ƒë∆∞·ª£c c√° nh√¢n h√≥a",
"X√°c minh t·∫•t c·∫£ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu c√≥ ph√¥ng ch·ªØ Roboto 16px, l·ªÅ trong 12px, l·ªÅ d∆∞·ªõi 16px",
"N√∫t 'ƒêƒÉng nh·∫≠p' c√≥ m√†u n·ªÅn #e50914, m√†u ch·ªØ #ffffff, b√°n k√≠nh vi·ªÅn 4px",
"Ki·ªÉm ch·ª©ng n√∫t 'ƒêƒÉng nh·∫≠p' c√≥ kh·∫£ nƒÉng ph·∫£n h·ªìi tr√™n m√†n h√¨nh r·ªông 360px",
"Quan s√°t t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ ƒë·ªÅu ƒë√°p ·ª©ng t·ª∑ l·ªá t∆∞∆°ng ph·∫£n WCAG √≠t nh·∫•t 4.5:1"
  ],
  [
"M·ªü trang 'https://www.amazon.com'",
"T√¨m ki·∫øm 'D√†n loa Bluetooth'",
"Ki·ªÉm ch·ª©ng t√¨m ki·∫øm ho√†n th√†nh trong v√≤ng d∆∞·ªõi 2 gi√¢y",
"K·∫øt qu·∫£ t√¨m ki·∫øm hi·ªÉn th·ªã √≠t nh·∫•t 10 s·∫£n ph·∫©m v·ªõi ti√™u ƒë·ªÅ ch·ª©a 'Loa Bluetooth'",
"Check r·∫±ng m·ªói th·∫ª s·∫£n ph·∫©m c√≥ chi·ªÅu r·ªông h√¨nh ·∫£nh ch√≠nh x√°c 150px",
"X√°c minh r·∫±ng gi√° s·∫£n ph·∫©m c√≥ c·ª° ch·ªØ 18px",
"Ki·ªÉm tra n√∫t 'Th√™m v√†o gi·ªè h√†ng' c√≥ m√†u #ff9900 v√† c√°c g√≥c bo tr√≤n 4px",
"M√†u n·ªÅn c·ªßa n√∫t 'Th√™m v√†o gi·ªè h√†ng' thay ƒë·ªïi th√†nh #e68a00 khi di chu·ªôt"
  ],
  [
"Truy c·∫≠p trang 'https://shop.example.com/item/P123'",
"X√°c minh r·∫±ng h√¨nh ·∫£nh s·∫£n ph·∫©m ch√≠nh '#main-product-image' t·∫£i th√†nh c√¥ng trong v√≤ng 800ms, c√≥ vƒÉn b·∫£n thay th·∫ø ch·ª©a 'V√≠ da Premium', kh√¥ng c√≥ h√¨nh m·ªù, k√≠ch th∆∞·ªõc t·ª± nhi√™n 1600x1200 px, hi·ªÉn th·ªã ·ªü 400x300px v·ªõi dung sai ¬±4px, ƒë·ªô s·∫Øc n√©t ‚â• 0.85, hi·ªán v·∫≠t n√©n ‚â§ 0.1, v√† ƒë·∫£m b·∫£o h√¨nh ·∫£nh ƒë∆∞·ª£c ƒë·ªãnh v·ªã ·ªü b√™n tr√°i c·ªßa kh·ªëi gi√° '.price' v·ªõi kho·∫£ng c√°ch t·ªëi thi·ªÉu 24px (¬±2px)"
  ]
]
B√¢y gi·ªù h√£y t·∫°o JSON t·ª´ y√™u c·∫ßu n√†y:

- Requirement:
{chr(10).join([f'{i+1}. "{t}"' for i, t in enumerate(batch)])}

B√¢y gi·ªù ch·ªâ tr·∫£ v·ªÅ m·∫£ng JSON c·ªßa c√°c m·∫£ng, theo c√πng m·ªôt th·ª© t·ª±.
"""
        retries = 3
        for attempt in range(retries):
            try:
                print("Call gemini step 1")
                response = call_gemini(prompt)
                clean_json = extract_json_from_text(response)
                result = json.loads(clean_json)
                if len(batch) == 1 and isinstance(result, list) and all(isinstance(x, str) for x in result):
                    result = [result]
                # If still not a list-of-lists with matching length ‚Üí error
                if not isinstance(result, list) or len(result) != len(batch) or any(not isinstance(x, list) for x in result):
                    raise ValueError("Model did not return a valid array of arrays with matching length.")
                # Th√™m t·ª´ng requirement v√† list subtasks t∆∞∆°ng ·ª©ng
                for req_text, subtasks in zip(batch, result):
                    task_list.append(subtasks)
                    task_trace.append((req_text, subtasks))
                break
            except Exception as e:
                print(f"‚ùå Error (attempt {attempt + 1}/3): {e}")
                print(f"‚ö†Ô∏è Raw response: {response}")
                if attempt == retries - 1:
                    # Fallback: v·∫´n gi·ªØ ch·ªó b·∫±ng m·∫£ng r·ªóng cho ƒë√∫ng s·ªë l∆∞·ª£ng
                    for req_text in batch:
                        task_list.append([])
                        task_trace.append((req_text, []))
                    print("‚ö†Ô∏è Continued with empty results for this batch.")

    return task_list, task_trace

def step2_generate_steps(subtask_groups):
    flat_tasks = [t for group in subtask_groups for t in group]
    print(f"Total tasks: {len(flat_tasks)}")
    number = 20
    grouped_tasks = [flat_tasks[i:i+number] for i in range(0, len(flat_tasks), number)]
    print(f"Grouped tasks: {len(grouped_tasks)}")
    all_step_groups = []
    step_trace = []
    step_map = []
    for subtask_list in grouped_tasks:    
        prompt = f"""You are a professional UI test step generator.
Your task is to convert the following Vietnamese atomic test instruction into a list of executable UI test steps in JSON format (must in English).

Instruction: "{subtask_list}"

Each step must follow this JSON structure:
{{
  "action": "action to perform (e.g. click, type, hover, locate, verify, etc.)",
  "selector": "CSS selector or a natural description (keep Vietnamese text/labels if present in the instruction, e.g. 'ƒêƒÉng nh·∫≠p' button), or empty string if not applicable",
  "value": "string value to type or expect, or empty string if not applicable, keep Vietnamese text if provided",
  "expected": {{
    // This object may contain multiple properties,
    // based only on what the instruction requires.
    // Each key is the name of a UI property (e.g. color, font, position).
    // Each value is the expected value.
  }}
}}

Explanation of the actions:
- click, type, hover, select, submit forms, search, goto etc.
- locate: find, identifying UI elements based on text, position (e.g. near/above), or attributes (class, ID, etc.).
- verify: validating properties like color, alignment, text, count, image presence, OCR output, size, position, etc. Checking that something exists, is visible, absent, or meets a layout/appearance requirement.

Important:
- Always return output in JSON with English keys.
- All fields (`action`, `selector`, `value`, `expected`) **must always be present**.
- If a field has no value, use:
  - `""` for empty strings
  - `{{}}` for empty object (when `expected` is not needed)
- Do not omit any field from the JSON step.
- Do not include any property in `expected` if it is not clearly mentioned in the instruction.
- `expected` must be a valid object (`{{}}`), and can contain:
  - 'url', 'domain', 'path', 'title', 'viewport-width', 'viewport-height', 'scoll-x', 'scroll-y'
  - 'text':
  - 'placeholder':
  - 'language': e.g., `"French"`, `"Chinese"`
  - 'position': 'relative', 'absolute', 'fixed', 'static',...
  - 'x', 'y', 'width', 'height': px (e.g.,{{"x": 100, "y": 200, "width": "300px", "height": "150px"}})
  - 'overflow': overflow-x, overflow-y, overflow-block, overflow-inline (e.g., "hidden", "scroll", "visible", "auto")
  - 'occluded': boolean (true if element is occluded by another, false if not)
  - `color`: e.g., "#ffffff" or "rgb(255, 255, 255)" or "white"
  - `background-color`
  - 'background-clip', 'background-origin', 'background-size'
  - 'fill', 'fill-opacity', 'stroke', 'stroke-opacity'
  - `font-family`, `font-size`, `font-weight`, `font-style` if mentioned
  - 'border': width, style, color, radius
  - 'padding': top, right, bottom, left
  - 'margin': top, right, bottom, left
  - 'text-align': "center", "left", "right", "justify",...
  - 'line-height': e.g., "1.5", "20px"
  - 'vertical-align': "middle", "top", "bottom", 'baseline',...
  - 'align-items': "center", "flex-start", "flex-end", 'space-between',...
  - 'justify-content': "space-between", 'center', "flex-end", "flex-start",...
  - 'align-content': "flex-start", "center", "space-around",...
  - 'align-self': "stretch", "center", "flex-start",...
  - 'gap': e.g., "10px"
  - 'opacity': "0.5", "1", etc.
  - Or any property related to styles, as long as it follows the correct format and rules stated (only declare if present in the input description).
  - 'visibility': "visible" or "hidden"
  - 'enabled': boolean (true or false)
  - 'focused': boolean
  - 'hovered': boolean     
  - 'active': boolean
  - Or any property related to state, as long as it follows the correct format and rules stated (only declare if present in the input description).   
  - dynamics:
  - `movement`: "static" or "moves" after an action
  - `scroll`: "sticky" | "fixed" | "static" | "none" or something
  - 'parallax': number (e.g., `0.5` for parallax effect)
  - `transition`: CSS transition
  - 'animation': CSS animation
  - `focus`: boolean, ('true' if element should be focused, via Tab or click)
  - `navigation`: destination URL if checking page redirection
  - `loading`: `"present", "loading", "none"` for spinners, indicators
  - 'progress-value': string, (% value if it is progress bar, pie chart, etc)
  - Or any property related to 'dynamics', as long as it follows the correct format and rules stated (only declare if present in the input description).
  - If the element is image (img), its may contain:
  - 'src': URL of the image
  - 'current-src': current source URL (after srcset, responsive loading)
  - 'alt': string (e.g., "H√¨nh ·∫£nh s·∫£n ph·∫©m", "Logo")
  - 'is-loaded': boolean (true if image is loaded, false if not)
  - 'load-time': number (in milliseconds, e.g., 500 for 0.5 seconds)
  - 'sharpness-score-gte': number (0 to 1, e.g., 0.8 for sharpness)
  - 'compression-artifacts-lte': number (0 to 1, e.g., 0.2 for compression artifacts)
  - 'rendered-dimensions': `width`, `height`, 'tolerance-px' (in pixels, e.g., 300x200)
  - 'natural-dimensions': `width`, `height` (natural size of the image)
  - 'viewport-dimensions': `width`, `height` (size of the image in the viewport)
  - 'watermark': boolean (true if image has a watermark, false if not)
  - Or any property related to expected , as long as it follows the correct format and rules stated (only declare if present in the input description).

I am using Selenium with ChromeDriver to extract the UI (User Interface) information of web elements.  
Therefore, all attributes must follow these rules:
1. Only include CSS properties that can be retrieved through `window.getComputedStyle(element)`.
2. The property names must follow Chrome‚Äôs computed style format:
   - All lowercase letters.
   - Words separated by hyphens (-).
   - Example: background-color, font-weight, border-radius, box-shadow.
3. Do NOT use camelCase or PascalCase.

Example 1:
- Task list:
[
  "Open 'https://www.amazon.com'",
  "Search 'Bluetooth Speakers'",
  "Verify search completes under 2 seconds",
  "Verify at least 10 product results with title containing 'Bluetooth Speaker'",
  "Verify each product card main image width is exactly 150px",
  "Verify the 'Add to Cart' button has color #ff9900 and border radius 4px, positioned at x=120px and y=300px, with width 200px and height 50px",
  "Verify the 'Add to Cart' button hover background changes to #e68a00"
]
- Response:
[
  {{
    "action": "goto",
    "selector": "",
    "value": "https://www.amazon.com",
    "expected": {{
      "url": "https://www.amazon.com"
    }}
  }},
  {{
    "action": "search",
    "selector": "'Search' input field",
    "value": "Bluetooth Speakers",
    "expected": {{
    }}
  }},
  {{
    "action": "verify",
    "selector": "search results",
    "value": "",
    "expected": {{
      "visibility": "visible",
      "timeout": 2000
    }}
  }},
  {{
    "action": "verify",
    "selector": ".search-results .product-title",
    "value": "",
    "expected": {{
      "count": 10,
      "text-content": "Bluetooth Speaker"
    }}
  }},
  {{
    "action": "verify",
    "selector": "'.product-card .main-image'",
    "value": "",
    "expected": {{
      "width": "150px"
    }}
  }},
  {{
    "action": "verify",
    "selector": "'Add to Cart' button",
    "value": "",
    "expected": {{
      "text-content": "Add to Cart",
      "color": "#ff9900",
      "border-radius": "4px",
      "x": "120px",
      "y": "300px",
      "width": "200px",
      "height": "50px"
    }}
  }},
  {{
    "action": "verify",
    "selector": "'Add to Cart' button",
    "value": "",
    "expected": {{
      "hovered": true,
      "background-color": "#e68a00"
    }}
  }}
]

Example 2:
- Task list:
[
  "Locate the 'Sign In' button at top-right (top 50px, right 30px)",
  "Click the 'Sign In' button",
  "Type 'testuser@example.com' into the email field",
  "Type 'Test@1234' into the password field",
  "Submit the login form",
  "Verify redirection to 'https://www.netflix.com/browse' within 3 seconds",
  "Verify at least 5 personalized movie thumbnails are visible",
  "Verify inputs use Roboto 16px, padding 12px, margin-bottom 16px",
  "Verify the 'Sign In' button background #e50914, text color #ffffff, border radius 4px",
  "Verify the 'Sign In' button is responsive at viewport width 360px",
  "Verify all visible elements meet contrast ratio ‚â• 4.5:1"
]
- Response:
[
  {{
    "action": "locate",
    "selector": "'Sign In' button",
    "value": "",
    "expected": {{
      "text-content": "Sign In",
      "top": "50px",
      "right": "30px"
    }}
  }},
  {{
    "action": "click",
    "selector": "'Sign In' button",
    "value": "",
    "expected": {{
    }}
  }},
  {{
    "action": "type",
    "selector": "email input field",
    "value": "testuser@example.com",
    "expected": {{
    }}
  }},
  {{
    "action": "type",
    "selector": "password input field",
    "value": "Test@1234",
    "expected": {{
    }}
  }},
  {{
    "action": "submit",
    "selector": "login form",
    "value": "",
    "expected": {{
    }}
  }},
  {{
    "action": "verify",
    "selector": "",
    "value": "",
    "expected": {{
      "url": "https://www.netflix.com/browse",
      "timeout": 3000
    }}
  }},
  {{
    "action": "verify",
    "selector": "personalized movie thumbnails",
    "value": "",
    "expected": {{
      "count": 5
    }}
  }},
  {{
    "action": "verify",
    "selector": "input",
    "value": "",
    "expected": {{
      "font-family": "Roboto",
      "font-size": "16px",
      "padding-top": "12px",
      "padding-right": "12px",
      "padding-bottom": "12px",
      "padding-left": "12px",
      "margin-bottom": "16px"
    }}
  }},
  {{
    "action": "verify",
    "selector": "'Sign In' button",
    "value": "",
    "expected": {{
      "text-content": "Sign In",
      "background-color": "#e50914",
      "color": "#ffffff",
      "border-radius": "4px"
    }}
  }},
  {{
    "action": "verify",
    "selector": "'Sign In' button",
    "value": "",
    "expected": {{
      "viewport-width": "360px",
      "visibility": "visible",
      "enabled": true
    }}
  }},
  {{
    "action": "verify",
    "selector": "all visible elements",
    "value": "",
    "expected": {{
      "contrast-ratio": "at least 4.5:1"
    }}
  }}
]

Example 3:
- Task list:
[
  "Open 'https://shop.example.com/item/P123'",
  "Verify main product image '#main-product-image' loads within 800ms, alt text contains 'Premium Leather Wallet', no watermark, natural size 1600x1200, rendered size 400x300, sharpness ‚â• 0.85, compression artifacts ‚â§ 0.1"
]
- Response:
[
  {{
    "action": "goto",
    "selector": "",
    "value": "https://shop.example.com/item/P123",
    "expected": {{
      "url": "https://shop.example.com/item/P123"
    }}
  }},
  {{
    "action": "verify",
    "selector": "#main-product-image",
    "value": "",
    "expected": {{
      "is-loaded": true,
      "load-time": 800,
      "alt-text": "Premium Leather Wallet",
      "watermark": false,
      "natural-width": 1600,
      "natural-height": 1200,
      "rendered-width": 400,
      "rendered-height": 300,
      "sharpness-score-gte": 0.85,
      "compression-artifacts-lte": 0.1
    }}
  }}
]

Example 4:
- Task list:
[
  "Nh·∫•p v√†o li√™n h·ªá 'Nguyen Van An'",
  "Nh·∫≠p 'Hello' v√†o tr∆∞·ªùng nh·∫≠p tin nh·∫Øn c√≥ chi·ªÅu cao 40px v√† c·ª° ch·ªØ 14px",
  "G·ª≠i tin nh·∫Øn",
  "X√°c minh r·∫±ng tin nh·∫Øn ƒë√£ g·ª≠i xu·∫•t hi·ªán trong c·ª≠a s·ªï tr√≤ chuy·ªán trong v√≤ng 1 gi√¢y, v·ªõi m√†u n·ªÅn #dcf8c6, cƒÉn l·ªÅ ph·∫£i, v√† th·ªùi gian c·ªßa tin nh·∫Øn ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng theo ki·ªÉu '12-hour', cƒÉn l·ªÅ ·ªü g√≥c d∆∞·ªõi c√πng b√™n ph·∫£i b√™n trong c·ª≠a s·ªï tr√≤ chuy·ªán"
]

- Response:
[
  {{
    "action": "click",
    "selector": "'Nguyen Van An' contact",
    "value": "",
    "expected": {{
    }}
  }},
  {{
    "action": "type",
    "selector": "'message' input",
    "value": "Hello",
    "expected": {{
      "height": "40px",
      "font-size": "14px"
    }}
  }},
  {{
    "action": "submit",
    "selector": "'send message' button",
    "value": "",
    "expected": {{
    }}
  }},
  {{
    "action": "verify",
    "selector": "'sent message bubble'",
    "value": "",
    "expected": {{
      "visibility": visible,
      "text-align": "right",
      "background-color": "#dcf8c6",
      "timeout": 1000,
      "timestamp": "12-hour",
      "display": "flex",
      "justify-content": "flex-end",
      "align-items": "flex-end"
    }}
  }}
]

Notes:
- Each atomic test instruction return only ONE test steps, NO splitting the instruction into multiple substeps.
- The selector can be a CSS selector or a natural-language reference to the element.
- UI may be implemented using any frontend framework (e.g., TailwindCSS, Bootstrap, raw HTML).
- Return only a JSON array. No explanation. No markdown.

Now generate the JSON array of steps for the instruction above.
"""
        retries = 3
        for attempt in range(retries): 
            try:
                print("Call gemini step 2")
                response = call_gemini(prompt)
                clean = extract_json_from_text(response)
                steps = json.loads(clean)
                # Ki·ªÉm tra c∆° b·∫£n: m·∫£ng v√† c√πng ƒë·ªô d√†i v·ªõi subtask_list
                if not isinstance(steps, list) or len(steps) != len(subtask_list):
                    raise ValueError("Model did not return a JSON array with the same length as input.")
                # B·∫£o ƒë·∫£m m·ªói ph·∫ßn t·ª≠ c√≥ ƒë·ªß 4 kh√≥a, ƒëi·ªÅn m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                normalized = []
                for idx, st in enumerate(steps):
                    if not isinstance(st, dict):
                        raise ValueError(f"Step at index {idx} is not an object.")
                    action = st.get("action", "")
                    selector = st.get("selector", "")
                    value = st.get("value", "")
                    expected = st.get("expected", {})
                    if expected is None or not isinstance(expected, dict):
                        expected = {}
                    step_obj = {
                        "action": action if isinstance(action, str) else "",
                        "selector": selector if isinstance(selector, str) else "",
                        "value": value if isinstance(value, str) else "",
                        "expected": expected
                    }
                    normalized.append(step_obj)
                    step_map.append((subtask_list[idx], [step_obj]))

                all_step_groups.append(normalized)
                break

            except Exception as e:
                print(f"‚ùå Error (attempt {attempt + 1}/3): {e}")
                print(f"‚ö†Ô∏è Raw response: {response}")
                if attempt == retries - 1:
                    # Fallback: t·∫°o step r·ªóng gi·ªØ ch·ªó (ƒë·ªÉ pipeline kh√¥ng g√£y)
                    fallback = [{
                        "action": "",
                        "selector": "",
                        "value": "",
                        "expected": {}
                    } for _ in subtask_list]
                    all_step_groups.append(fallback)
                    for idx, st in enumerate(subtask_list):
                        step_map.append((st, [fallback[idx]]))
        # Sau khi x·ª≠ l√Ω xong, kh√¥i ph·ª•c v·ªÅ c·∫•u tr√∫c song song task_trace
    step_trace = step_map
    step_groups_flat = [steps for _, steps in step_map]

# ‚úÖ G·ªôp l·∫°i theo c·∫•u tr√∫c g·ªëc ban ƒë·∫ßu (ƒë·∫£m b·∫£o ƒë√∫ng h√†ng Excel)
    reconstructed = []
    idx = 0
    for group in subtask_groups:
        size = len(group)
        reconstructed.append([step_groups_flat[idx + j][0] for j in range(size)])
        idx += size

    return reconstructed, step_trace

def save_excel_summary(filename, task_trace, step_groups):
    rows = []
    for idx, (main_task, subtasks) in enumerate(task_trace):
        step_group = step_groups[idx] if idx < len(step_groups) else []
        subtask_json = json.dumps(subtasks, ensure_ascii=False)
        step_json = json.dumps(step_group, ensure_ascii=False)
        rows.append({
            "Main Task": main_task,
            "Sub Tasks": subtask_json,
            "Steps": step_json
        })
    df = pd.DataFrame(rows)
    filename.parent.mkdir(parents=True, exist_ok=True)
    df.to_excel(filename, index=False)

def main():
    inputName = input("Enter the base name for input files: ")

    INPUT_DIR = Path("Input")
    TASK_DIR = Path("JSONtask")
    STEP_DIR = Path("JSONwStep")
    REPORT_DIR = Path("Report")
    for d in [TASK_DIR, STEP_DIR, REPORT_DIR]:
        d.mkdir(parents=True, exist_ok=True)

    numFile = 20
    print(f"Generate {numFile} files")
    for i in range(numFile):
        filename = f"{inputName}_{i}.txt"
        if not (INPUT_DIR / filename).exists():
            print(f"Creating example file: {filename}")
            step0_create_task(filename)
        else:
            print(f"File already exists: {filename}")
        case_id = Path(filename).stem
        try:
            
            print(f"\n‚ñ∂Ô∏è Running pipeline for: {case_id}")
            task_file = INPUT_DIR / f"{case_id}.txt"
            task_json_file = TASK_DIR / f"{case_id}.task.json"
            task_list, task_trace = step1_analyze_task(task_file)
            save_json(task_json_file, task_list)
            print("\n Step 1 success \n")  

            step_json_file = STEP_DIR / f"{case_id}.step.json"
            step_groups, step_trace = step2_generate_steps(task_list)
            save_json(step_json_file, step_groups)
            print("\n Step 2 success \n")

            report_file = REPORT_DIR / f"{case_id}.summary.xlsx"
            save_excel_summary(report_file, task_trace, step_groups)
            print(f"‚úÖ Excel saved to: {report_file}")
        except Exception as e:
            print(f"‚ùå Error in {case_id}: {e}")

if __name__ == "__main__":
    main()
